<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.humboldtjs.utility"><apiName>com.humboldtjs.utility</apiName><apiDetail/><apiClassifier id="com.humboldtjs.utility:EasyStyler"><apiName>EasyStyler</apiName><shortdesc>
	 A utility class which makes it easy to style HTML elements.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class which makes it easy to style HTML elements. You can
	 register styles using names and then easily apply them to HTML elements
	 very similarly to CSS. The benefits of having it in code are that if
	 your application runs in a page over which you have no direct control
	 managing styles this way is easier.
	 
	 In addition it manages dealing with some browser differences and
	 vendor prefixes.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.utility:EasyStyler:EasyStyler"><apiName>EasyStyler</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><constructor/></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.utility:EasyStyler:applyStyleObject"><apiName>applyStyleObject</apiName><shortdesc>
		 Apply a set of style properties according to a style object definition.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="dom.domobjects:HTMLElement"/><apiDesc>The HTML element to apply the style properties to
		 </apiDesc></apiParam><apiParam><apiItemName>aStyleObject</apiItemName><apiType value="Object"/><apiDesc>The object containing the style properties to apply
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Apply a set of style properties according to a style object definition.
		 The style object is an Object where its indices are CSS style
		 properties using the JavaScript notations. When prefixed with a "-"
		 vendor prefixes for all major browser vendors are automatically
		 prefixed. This is useful for easily using experimental CSS3 properties.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:EasyStyler:applyStyle"><apiName>applyStyle</apiName><shortdesc>
		 Apply a previously registered style to an HTML element
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="dom.domobjects:HTMLElement"/><apiDesc>The HTML element to apply the style properties to
		 </apiDesc></apiParam><apiParam><apiItemName>aStyleName</apiItemName><apiType value="String"/><apiDesc>The string name of the registered style to apply
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Apply a previously registered style to an HTML element
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:EasyStyler:defineStyle"><apiName>defineStyle</apiName><shortdesc>
		 Register a new object style definition under a name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aStyleName</apiItemName><apiType value="String"/><apiDesc>The HTML element to apply the style properties to
		 </apiDesc></apiParam><apiParam><apiItemName>aValues</apiItemName><apiType value="Object"/><apiDesc>The object containing the style properties to apply
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register a new object style definition under a name. This allows
		 you to quickly apply stylesets that are used multiple times within
		 an application similar to CSS.
		 The style object is an Object where its indices are CSS style
		 properties using the JavaScript notations. When prefixed with a "-"
		 vendor prefixes for all major browser vendors are automatically
		 prefixed. This is useful for easily using experimental CSS3 properties.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:EasyStyler:protected:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Retrieve the instance of the EasyStyler that maintains the list of
		 style definitions.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiStatic/><apiReturn><apiOperationClassifier>com.humboldtjs.utility:EasyStyler</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieve the instance of the EasyStyler that maintains the list of
		 style definitions.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.utility:EasyStyler:protected:mInstance"><apiName>mInstance</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiStatic/><apiValueClassifier>com.humboldtjs.utility:EasyStyler</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:EasyStyler:protected:mStyles"><apiName>mStyles</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.utility:Animator"><apiName>Animator</apiName><shortdesc>
	 Time based animator.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Time based animator. Can take an HTML element and perform simple
	 linear time based animations. Takes into account things like vendor
	 prefixes, and some browser differences (e.g. opacity).
	 
	 Note that this operates on an HTML element, and will cause desync from its
	 corresponding DisplayObject.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.utility:Animator:Animator"><apiName>Animator</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><constructor/></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>aElement</apiItemName><apiType value="dom.domobjects:HTMLElement"/></apiParam></apiConstructorDef><apiDesc>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.utility:Animator:animatePropertyTo"><apiName>animatePropertyTo</apiName><shortdesc>
		 Animate a property of the HTML element's style over towards a certain
		 value over time.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aProperty</apiItemName><apiType value="String"/><apiDesc>The style property to animate using Javascript notation
		 </apiDesc></apiParam><apiParam><apiItemName>aValue</apiItemName><apiType value="Number"/><apiDesc>The numerical value to animate towards
		 </apiDesc></apiParam><apiParam><apiItemName>aRoundFactor</apiItemName><apiType value="Number"/><apiDesc>The factor to use when rounding the value
		 </apiDesc></apiParam><apiParam><apiItemName>aPostFix</apiItemName><apiType value="String"/><apiDesc>The string to append to the rounded value. E.g. "px" for style values that require it.
		 </apiDesc></apiParam><apiParam><apiItemName>aCompleteFunction</apiItemName><apiType value="Function"/><apiDesc>The EventFunction that needs to be called when the animation is done
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Animate a property of the HTML element's style over towards a certain
		 value over time. The value will automatically get rounded using the
		 following algorithm:
		 
		 newValue = Math.round(targetValue aRoundFactor) / aRoundFactor
		 
		 So to round to quarters you would enter aRoundFactor = 4.
		 
		 When you animate a property you can prepend that property with a "-"
		 symbol. If you do so the property will get prefixed with all the
		 standard vender prefixes.
		 
		 Note that the properties need to use the Javascript naming style!
		 This means e.g. "fontSize" instead of "font-size".
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:Animator:protected:animationLoop"><apiName>animationLoop</apiName><shortdesc>
		 The main animation loop.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The main animation loop. Processes all currently running animations.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.utility:Animator:protected:mAnimationMap"><apiName>mAnimationMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Animator:protected:mElement"><apiName>mElement</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="dom.domobjects:HTMLElement"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Animator:protected:mTimer"><apiName>mTimer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.utility:ScaleUtility"><apiName>ScaleUtility</apiName><shortdesc>
	 Helper class to help determine the scale of elements based on a
	 preferred scalestyle, their dimensions, and the available space.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Helper class to help determine the scale of elements based on a
	 preferred scalestyle, their dimensions, and the available space.
	 </apiDesc></apiClassifierDetail><apiOperation id="com.humboldtjs.utility:ScaleUtility:calculateScaleFor"><apiName>calculateScaleFor</apiName><shortdesc>
		 Calculate the ideal scale for an element in a certain space
		 using the given scale style.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>The ideal scale
		 </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>aObjectWidth</apiItemName><apiType value="Number"/><apiDesc>The element to determine the scale for
		 </apiDesc></apiParam><apiParam><apiItemName>aObjectHeight</apiItemName><apiType value="Number"/><apiDesc>The width of the target area
		 </apiDesc></apiParam><apiParam><apiItemName>aTargetWidth</apiItemName><apiType value="Number"/><apiDesc>The height of the target area
		 </apiDesc></apiParam><apiParam><apiItemName>aTargetHeight</apiItemName><apiType value="Number"/><apiDesc>The scalestyle to use to determine the scale
		 		 </apiDesc></apiParam><apiParam><apiItemName>aScaleStyle</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
		 Calculate the ideal scale for an element in a certain space
		 using the given scale style.
		 		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.utility:ScaleUtility:SCALE_FILL_ONLY_LARGER"><apiName>SCALE_FILL_ONLY_LARGER</apiName><shortdesc> Same as SCALE_FILL however the component will never be smaller than it''s original size.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="int"/></apiValueDef><apiDesc> Same as SCALE_FILL however the component will never be smaller than it''s original size. </apiDesc></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:ScaleUtility:SCALE_FILL"><apiName>SCALE_FILL</apiName><shortdesc> The component is scaled to always fill the entire ViewDisplay boundaries.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc> The component is scaled to always fill the entire ViewDisplay boundaries. </apiDesc></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:ScaleUtility:SCALE_FIT_ONLY_SMALLER"><apiName>SCALE_FIT_ONLY_SMALLER</apiName><shortdesc> Same as SCALE_FIT however the component will never be larger than it''s original size.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc> Same as SCALE_FIT however the component will never be larger than it''s original size. </apiDesc></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:ScaleUtility:SCALE_FIT"><apiName>SCALE_FIT</apiName><shortdesc> The component is scaled to always fit but never exceed the ViewDisplay boundaries.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc> The component is scaled to always fit but never exceed the ViewDisplay boundaries. </apiDesc></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:ScaleUtility:SCALE_NOSCALE"><apiName>SCALE_NOSCALE</apiName><shortdesc> The component is not scaled.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc> The component is not scaled. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.utility:Image"><apiName>Image</apiName><shortdesc>
	 An Image display component which scales its content to fit.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.humboldtjs.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An Image display component which scales its content to fit. It uses
	 a Canvas to cache its contents for performance if Canvas support is
	 available in the browser.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.utility:Image:Image"><apiName>Image</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><constructor/></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.utility:Image:getSource"><apiName>getSource</apiName><shortdesc>
		 The source URL of the image to display
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 The source URL of the image to display
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:Image:protected:onLoadComplete"><apiName>onLoadComplete</apiName><shortdesc>
		 Called when loading is complete
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aEvent</apiItemName><apiOperationClassifier>com.humboldtjs.events:HJSEvent</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Called when loading is complete
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:Image:protected:onResize"><apiName>onResize</apiName><shortdesc>
		 When the window resizes, this probably means the element resized as
		 well.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aEvent</apiItemName><apiType value="dom.domobjects:Event"/></apiParam></apiOperationDef><apiDesc>
		 When the window resizes, this probably means the element resized as
		 well. When this happens we'll re-layout our component, and if needed
		 updated the Canvas cache.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:Image:setSource"><apiName>setSource</apiName><shortdesc>
		 The source URL of the image to display
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 The source URL of the image to display
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.utility:Image:protected:mBitmapCache"><apiName>mBitmapCache</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.humboldtjs.display:Canvas</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mContentHeight"><apiName>mContentHeight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mContentWidth"><apiName>mContentWidth</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mContent"><apiName>mContent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.humboldtjs.display:DisplayObject</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mLoader"><apiName>mLoader</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.humboldtjs.display:Loader</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mSource"><apiName>mSource</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.utility:Image:protected:mTimer"><apiName>mTimer</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.utility:DelayedCall"><apiName>DelayedCall</apiName><shortdesc>
	 Utility class to call functions after a time delay.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Utility class to call functions after a time delay.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.utility:DelayedCall:DelayedCall"><apiName>DelayedCall</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.utility:DelayedCall:call"><apiName>call</apiName><shortdesc>
		 Call the EventFunction after a certain time.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to call
		 </apiDesc></apiParam><apiParam><apiItemName>aTime</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The time to delay calling the function
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Call the EventFunction after a certain time.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:DelayedCall:cancelCall"><apiName>cancelCall</apiName><shortdesc>
		 Cancel a delayed call to the given EventFunction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to which the delayed call needs to be cancelled.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Cancel a delayed call to the given EventFunction. If the EventFunction
		 has previously been set for a delayed call, but that delayed call has
		 not yet happened. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.utility:DelayedCall:hasCall"><apiName>hasCall</apiName><shortdesc>
		 Whether there is a delayed call planned to the given EventFunction
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to check
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Whether there is a delayed call planned to the given EventFunction
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.utility:DelayedCall:protected:mTimers"><apiName>mTimers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiStatic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>