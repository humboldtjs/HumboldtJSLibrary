<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.humboldtjs.system"><apiName>com.humboldtjs.system</apiName><apiDetail/><apiClassifier id="com.humboldtjs.system:HtmlUtils"><apiName>HtmlUtils</apiName><shortdesc>
	 Some utility methods that help with dealing with HTML elements and their
	 browser and device differences.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Some utility methods that help with dealing with HTML elements and their
	 browser and device differences.
	 
	 Mainly deals with the abstraction of differences between HTML events.
	 </apiDesc></apiClassifierDetail><apiOperation id="com.humboldtjs.system:HtmlUtils:addHtmlEventListener"><apiName>addHtmlEventListener</apiName><shortdesc>
		 Start listening to an HTML DOM event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to bind the event to
		 </apiDesc></apiParam><apiParam><apiItemName>aType</apiItemName><apiType value="String"/><apiDesc>The string name of the event to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction that should be called when the event is triggered
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Start listening to an HTML DOM event. When the event is triggered
		 the EventFunction will be called with the dom Event that
		 was triggered. This will automatically handle the different methods
		 of event listening between different browsers.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:bindMove"><apiName>bindMove</apiName><shortdesc>
		 Listen to when an HTML element gets a mousemove or touchmove.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to bind the event on
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to call when the move happens
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Listen to when an HTML element gets a mousemove or touchmove. This
		 allows you to capture the move during a drag action regardless of whether
		 the user is on a touchscreen or using a mouse.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:bindPress"><apiName>bindPress</apiName><shortdesc>
		 Listen to when an HTML element gets a mousedown or touchstart.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to bind the event on
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to call when the press happens
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Listen to when an HTML element gets a mousedown or touchstart. This
		 allows you to capture the start of a drag action regardless of whether
		 the user is on a touchscreen or using a mouse.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:bindUnPress"><apiName>bindUnPress</apiName><shortdesc>
		 Listen to when an HTML element gets a mouseup, touchend or touchcancel.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to bind the event on
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction to call when the unpress happens
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Listen to when an HTML element gets a mouseup, touchend or touchcancel. This
		 allows you to capture the end of a drag action regardless of whether
		 the user is on a touchscreen or using a mouse.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:getHtmlElementById"><apiName>getHtmlElementById</apiName><shortdesc>
		 Recursively search a given HTML element for a child with the requested
		 ID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="dom.domobjects:HTMLElement"/></apiReturn><apiParam><apiItemName>aId</apiItemName><apiType value="String"/><apiDesc>The ID to search for
		 </apiDesc></apiParam><apiParam><apiItemName>aParentObject</apiItemName><apiType value="dom.domobjects:HTMLElement"/><apiDesc>The parent HTML element to search through
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Recursively search a given HTML element for a child with the requested
		 ID.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:hasHtmlEventListener"><apiName>hasHtmlEventListener</apiName><shortdesc>
		 Check whether an HTML element has any event listeners bound to it.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to check for listeners
		 </apiDesc></apiParam><apiParam><apiItemName>aType</apiItemName><apiType value="String"/><apiDesc>The string name of the event to check for
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check whether an HTML element has any event listeners bound to it.
		 This only takes into account events that have been bound using the
		 HtmlUtils class.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:removeHtmlEventListener"><apiName>removeHtmlEventListener</apiName><shortdesc>
		 Stop listening to an HTML DOM event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element to unbind the event from
		 </apiDesc></apiParam><apiParam><apiItemName>aType</apiItemName><apiType value="String"/><apiDesc>The string name of the event to unbind
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction that references the instance and method that the event was bound to
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stop listening to an HTML DOM event. You can unregister even with a
		 different EventFunction as long as the instance and method are the
		 same.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:unbindMove"><apiName>unbindMove</apiName><shortdesc>
		 Stop listening to the Move events.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element that the the event was bound to
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction that the move was bound to
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stop listening to the Move events.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:unbindPress"><apiName>unbindPress</apiName><shortdesc>
		 Stop listening to the Press events.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element that the the event was bound to
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction that the press was bound to
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stop listening to the Press events.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:HtmlUtils:unbindUnPress"><apiName>unbindUnPress</apiName><shortdesc>
		 Stop listening to the UnPress events.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aElement</apiItemName><apiType value="Object"/><apiDesc>The HTML element that the the event was bound to
		 </apiDesc></apiParam><apiParam><apiItemName>aFunction</apiItemName><apiType value="dom.domobjects:EventFunction"/><apiDesc>The EventFunction that the unpress was bound to
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stop listening to the UnPress events.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.system:HtmlUtils:protected:mListeners"><apiName>mListeners</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiStatic/><apiData>null</apiData><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.system:Convert"><apiName>Convert</apiName><shortdesc>
	 A converter utility class to reliably parse strings into other
	 types.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A converter utility class to reliably parse strings into other
	 types.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:Convert:Convert"><apiName>Convert</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.system:Convert:protected:stripLeadingZeros"><apiName>stripLeadingZeros</apiName><shortdesc>
		 Strip a numerical string of its leading zeros.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/><apiDesc>The numerical string to parse
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Strip a numerical string of its leading zeros.
		 This method does not handle different locales and different decimal
		 separators.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:protected:stripTrailingZeros"><apiName>stripTrailingZeros</apiName><shortdesc>
		 Strip a numerical string of its trailing zeros (after the decimal point).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/><apiDesc>The numerical string to parse
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Strip a numerical string of its trailing zeros (after the decimal point).
		 This method does not handle different locales and different decimal
		 separators.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toArray"><apiName>toArray</apiName><shortdesc>
		 Convert the input to an array.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to an array. Assumes an unquoted comma delimited
		 string.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toBoolean"><apiName>toBoolean</apiName><shortdesc>
		 Conver the input to a boolean.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Conver the input to a boolean. Valid values for "true" are "true", "yes"
		 and "1", anything else returns false.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toEulerAngles3D"><apiName>toEulerAngles3D</apiName><shortdesc>
		 Convert the input to a Vector3D.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.humboldtjs.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a Vector3D. This assumes the input is comma
		 delimited and used Euler angles in its notation.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toInt"><apiName>toInt</apiName><shortdesc>
		 Convert the input to a whole number integer
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a whole number integer
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toNumber"><apiName>toNumber</apiName><shortdesc>
		 Convert the input to a floating point number.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a floating point number.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toRectangle"><apiName>toRectangle</apiName><shortdesc>
		 Convert the input to a Rectangle.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.humboldtjs.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a Rectangle. Assumes a comma delimited list of
		 four values, x, y, width, height
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toStr"><apiName>toStr</apiName><shortdesc>
		 Convert the input to a string.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a string. If the input is null returns an
		 empty string.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toUnTyped"><apiName>toUnTyped</apiName><shortdesc>
		 Return an untyped value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
		 Return an untyped value.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toVector3D"><apiName>toVector3D</apiName><shortdesc>
		 Convert the input to a Vector3D.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.humboldtjs.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Convert the input to a Vector3D. This assumes the input is comma
		 delimited and used radian angles in its notation.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Convert:toXML"><apiName>toXML</apiName><shortdesc>
		 Parse a string to an HTMLElement XML document
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="dom.domobjects:HTMLElement"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
		 Parse a string to an HTMLElement XML document
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.humboldtjs.system:InternalId"><apiName>InternalId</apiName><shortdesc>
	 Utility class that can generate unique IDs.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Utility class that can generate unique IDs.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:InternalId:InternalId"><apiName>InternalId</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.system:InternalId:generateInternalId"><apiName>generateInternalId</apiName><shortdesc>
		 Generate a unique ID with the given prefix.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>aPrefix</apiItemName><apiType value="String"/><apiDesc>The string to place in front of the unique ID. Usually the classname for the object you are generating an ID for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Generate a unique ID with the given prefix.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.humboldtjs.system:InternalId:protected:mInternalCounter"><apiName>mInternalCounter</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.system:Application"><apiName>Application</apiName><shortdesc>
	 The root of any HumboldtJS application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.humboldtjs.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The root of any HumboldtJS application. This class manages adding the
	 app to the DOM
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:Application:Application"><apiName>Application</apiName><shortdesc>
		 </shortdesc><prolog><asCustoms><constructor/></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.system:Application:protected:_initialize"><apiName>_initialize</apiName><shortdesc>
		 DOM is accessible, so now we can continue setting up our application
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aEvent</apiItemName><apiType value="dom.domobjects:Event"/></apiParam></apiOperationDef><apiDesc>
		 DOM is accessible, so now we can continue setting up our application
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Application:getFullScreen"><apiName>getFullScreen</apiName><shortdesc>
		 Whether the application should run fullscreen or not.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether the application should run fullscreen or not. Does not work
		 in all browsers. Use Capabilities.getHasFullScreen() to test whether
		 it is supported first
		 
		 </apiDesc></apiOperationDetail><related-links><link href="com.humboldtjs.system.xml#Capabilities"><linktext>com.humboldtjs.system.Capabilities</linktext></link></related-links></apiOperation><apiOperation id="com.humboldtjs.system:Application:getStage"><apiName>getStage</apiName><shortdesc>
		 Returns a reference to the stage object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>com.humboldtjs.display:Stage</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns a reference to the stage object.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="com.humboldtjs.display.xml#Stage"><linktext>com.humboldtjs.display.Stage</linktext></link></related-links></apiOperation><apiOperation id="com.humboldtjs.system:Application:protected:initialize"><apiName>initialize</apiName><shortdesc>
		 Initialize the application and add it to the DOM.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Initialize the application and add it to the DOM. This is the typical
		 entry point your application should override to provide its own
		 functionality.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Application:protected:onFullScreenChange"><apiName>onFullScreenChange</apiName><shortdesc>
		 When we return from fullscreen mode this method takes care of
		 cleanup.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aEvent</apiItemName><apiType value="dom.domobjects:Event"/></apiParam></apiOperationDef><apiDesc>
		 When we return from fullscreen mode this method takes care of
		 cleanup. It also triggers a window resize event because this does
		 not happen automatically even though the size DOES change.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Application:protected:onResize"><apiName>onResize</apiName><shortdesc>
		 On mobile devices whenever the screen resizes we make sure we hide
		 the browser chrome again
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aEvent</apiItemName><apiType value="dom.domobjects:Event"/></apiParam></apiOperationDef><apiDesc>
		 On mobile devices whenever the screen resizes we make sure we hide
		 the browser chrome again
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Application:setFullScreen"><apiName>setFullScreen</apiName><shortdesc>
		 Whether the application should run fullscreen or not.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
		 Whether the application should run fullscreen or not. Does not work
		 in all browsers. Use Capabilities.getHasFullScreen() to test whether
		 it is supported first
		 
		 </apiDesc></apiOperationDetail><related-links><link href="com.humboldtjs.system.xml#Capabilities"><linktext>com.humboldtjs.system.Capabilities</linktext></link></related-links></apiOperation><apiValue id="com.humboldtjs.system:Application:protected:mApplicationRoot"><apiName>mApplicationRoot</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="dom.domobjects:HTMLElement"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:Application:protected:mFullScreen"><apiName>mFullScreen</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:Application:protected:mStage"><apiName>mStage</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>com.humboldtjs.display:Stage</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.system:Capabilities"><apiName>Capabilities</apiName><shortdesc>
	 Utility class to detect environment capabilities.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Utility class to detect environment capabilities.
	 </apiDesc></apiClassifierDetail><apiOperation id="com.humboldtjs.system:Capabilities:getHasAudio"><apiName>getHasAudio</apiName><shortdesc>
		 Whether the Audio tag is supported.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether the Audio tag is supported. Note that this doesn't tell
		 you whether a certain codec is supported or if there are any
		 platform specific quirks you still have to deal with.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasCanvasSupport"><apiName>getHasCanvasSupport</apiName><shortdesc>
		 Does the browser have Canvas support? You should use this method
		 to detect this before using the Canvas class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Does the browser have Canvas support? You should use this method
		 to detect this before using the Canvas class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasFullScreen"><apiName>getHasFullScreen</apiName><shortdesc>
		 Does the browser support fullscreen mode? You should use this method
		 to detect this before setting fullscreen on an Application instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Does the browser support fullscreen mode? You should use this method
		 to detect this before setting fullscreen on an Application instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasMp4"><apiName>getHasMp4</apiName><shortdesc>
		 Whether video with the mimetype video/mp4 can be decoded by the
		 browser.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether video with the mimetype video/mp4 can be decoded by the
		 browser. This requires Video tag support to be available.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasTouchscreen"><apiName>getHasTouchscreen</apiName><shortdesc>
		 Whether the device is a touch-based device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether the device is a touch-based device.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasVideo"><apiName>getHasVideo</apiName><shortdesc>
		 Whether the Video tag is supported.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether the Video tag is supported. Note that this doesn't tell
		 you whether a certain codec is supported or if there are any
		 platform specific quirks you still have to deal with.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getHasWebm"><apiName>getHasWebm</apiName><shortdesc>
		 Whether video with the mimetype video/webm can be decoded by the
		 browser.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Whether video with the mimetype video/webm can be decoded by the
		 browser. This requires Video tag support to be available.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getLanguage"><apiName>getLanguage</apiName><shortdesc>
		 Get a user's prefered language.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Get a user's prefered language. This should normally be the same
		 language as the browser or OS. If this language could not be
		 determined will return a default of "en-us". 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getManufacturer"><apiName>getManufacturer</apiName><shortdesc>
		 Get a manufacturer ID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Get a manufacturer ID. This is provided purely for compatibility with
		 flash (which would return the OS prepended with "Flash ").
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getOs"><apiName>getOs</apiName><shortdesc>
		 Returns the Operating System a user is using.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the Operating System a user is using. Valid return values
		 are:
		 
		 iOS
		 Android
		 Windows
		 Macintosh
		 Linux
		 UNIX
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getPixelAspectRatio"><apiName>getPixelAspectRatio</apiName><shortdesc>
		 The pixel-aspect-ratio.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 The pixel-aspect-ratio. This should be 1.0 if a pixel is square.
		 There is a known case when using a resolution of 1280x1024 where
		 pixels are non-square. This can be used to adjust for that.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getScreenAvailableX"><apiName>getScreenAvailableX</apiName><shortdesc>
		 The available screen width, without taskbars, menus, etc.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 The available screen width, without taskbars, menus, etc.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getScreenAvailableY"><apiName>getScreenAvailableY</apiName><shortdesc>
		 The available screen height, without taskbars, menus, etc.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 The available screen height, without taskbars, menus, etc.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getScreenResolutionX"><apiName>getScreenResolutionX</apiName><shortdesc>
		 The total screen width.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 The total screen width.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getScreenResolutionY"><apiName>getScreenResolutionY</apiName><shortdesc>
		 The total screen height.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
		 The total screen height.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:getVersion"><apiName>getVersion</apiName><shortdesc>
		 Returns the version of HumboldtJS used to compile the application.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the version of HumboldtJS used to compile the application.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Capabilities:videoMimeSupported"><apiName>videoMimeSupported</apiName><shortdesc>
		 Detect whether video with a certain mime type is supported.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>aMime</apiItemName><apiType value="String"/><apiDesc>The mime-type to check for 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Detect whether video with a certain mime type is supported. Is used
		 to detect mp4 or webm support, but can also be used for other
		 formats.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.humboldtjs.system:StringEx"><apiName>StringEx</apiName><shortdesc>
	 A utility class which adds some missing string parsing functionality
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class which adds some missing string parsing functionality
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:StringEx:StringEx"><apiName>StringEx</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.system:StringEx:trim"><apiName>trim</apiName><shortdesc>
		 Trim a string of leading and trailing whitespace.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>aValue</apiItemName><apiType value="String"/><apiDesc>The string to parse
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Trim a string of leading and trailing whitespace.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.humboldtjs.system:OperatingSystem"><apiName>OperatingSystem</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:OperatingSystem:OperatingSystem"><apiName>OperatingSystem</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.humboldtjs.system:OperatingSystem:ANDROID"><apiName>ANDROID</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Android</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:IOS"><apiName>IOS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>iOS</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:LINUX"><apiName>LINUX</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Linux</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:MAC"><apiName>MAC</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Macintosh</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:UNKNOWN_UNIX"><apiName>UNKNOWN_UNIX</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>UNIX</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Unknown OS</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.humboldtjs.system:OperatingSystem:WINDOWS"><apiName>WINDOWS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Windows</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.humboldtjs.system:Logger"><apiName>Logger</apiName><shortdesc>
	 Allows logging to the default browser console.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Allows logging to the default browser console. Basically does the same
	 thing as trace, but also allows to log warnings and errors.
	 </apiDesc></apiClassifierDetail><apiConstructor id="com.humboldtjs.system:Logger:Logger"><apiName>Logger</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.humboldtjs.system:Logger:error"><apiName>error</apiName><shortdesc>
		 Write a message or object to the console as an error
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aMessage</apiItemName><apiType value="any"/><apiDesc>The message or object to write
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Write a message or object to the console as an error
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Logger:log"><apiName>log</apiName><shortdesc>
		 Write a message or object to the console.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aMessage</apiItemName><apiType value="any"/><apiDesc>The message or object to write
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Write a message or object to the console.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.humboldtjs.system:Logger:warn"><apiName>warn</apiName><shortdesc>
		 Write a message or object to the console as a warning.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aMessage</apiItemName><apiType value="any"/><apiDesc>The message or object to write
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Write a message or object to the console as a warning.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>